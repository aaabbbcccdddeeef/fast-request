import{_ as t,X as i,Y as n,Z as e,a0 as o,$ as r,a2 as c,B as d}from"./framework-e053119e.js";const s="/fast-request/img/2023.1.4/autoDomain_en.png",l={},h=e("h1",{id:"auto-domain",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#auto-domain","aria-hidden":"true"},"#"),o(" Auto domain")],-1),m=c('<h2 id="trigger-point" tabindex="-1"><a class="header-anchor" href="#trigger-point" aria-hidden="true">#</a> Trigger point</h2><p>When clicking <svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-restfulFastRequest"></use></svg> on the left side of the method, if no domain is configured, it will be automatically created.</p><h2 id="project-name" tabindex="-1"><a class="header-anchor" href="#project-name" aria-hidden="true">#</a> Project name</h2><p>The project name is taken from the api <code>module name</code></p><p>Why? For example, there are two modules&#39; APIs under the project, <code>Module-1</code> and <code>Module-2</code>. If the domain name value of <code>Module-1</code> is already stored and when clicking the <svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-restfulFastRequest"></use></svg> on the left of the API method under <code>Module-2</code>, the old version cannot automatically switch the project name.</p><p>It is recommended not to <mark>manually add the project name</mark> later because the plugin cannot find the mapping relationship, which may easily result in using the domain name of <code>Module-1</code> instead of the domain name of <code>Module-2</code> when saving the API of <code>Module-2</code>.</p><p>Therefore, another benefit of auto domain name is the <mark>automatic switching of API domain names</mark>. If it does not exist, it will be automatically generated. If there is a need for improvement, developers only need to modify the domain name value! The plugin will automatically adapt!</p><h2 id="configuration-file-parsing-logic" tabindex="-1"><a class="header-anchor" href="#configuration-file-parsing-logic" aria-hidden="true">#</a> Configuration file parsing logic</h2><ol><li>Read <code>application.yml</code> or <code>bootstrap.yml</code>. If the configuration <code>server.port</code> or <code>server.servlet.context-path</code> can be found, take the configuration.</li><li>If the above configuration files cannot find <code>server.port</code> or <code>server.servlet.context-path</code>, read <code>spring.profiles.active</code> as the variable <code>env</code>. Then look for <code>application-env.yml</code> or <code>bootstrap-env.yml</code> to find the configuration <code>server.port</code> or <code>server.servlet.context-path</code>.</li><li>The logic for <code>properties</code> files is similar.</li><li>If the above configurations cannot be found, use <code>port=8080, context-path=/</code>.</li><li>The project name is taken from the <code>module name</code>.</li><li><code>spring.profiles.active</code> does not support Maven variables parse, for example <code>spring.profiles.active=@active.env@</code>.</li></ol><h2 id="config-switch" tabindex="-1"><a class="header-anchor" href="#config-switch" aria-hidden="true">#</a> Config switch</h2><p><img src="'+s+'" alt="autoDomain" loading="lazy"></p>',11);function p(f,u){const a=d("Badge");return i(),n("div",null,[h,e("p",null,[o("Version required: "),r(a,{text:"2023.1.4"})]),m])}const v=t(l,[["render",p],["__file","autoDomain.html.vue"]]);export{v as default};
