import{_ as c,X as d,Y as t,Z as e,a0 as o,$ as r,a2 as i,B as s}from"./framework-e053119e.js";const n="/fast-request/img/2023.1.4/autoDomain.png",l={},p=e("h1",{id:"自动域名",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#自动域名","aria-hidden":"true"},"#"),o(" 自动域名")],-1),h=i('<h2 id="触发点" tabindex="-1"><a class="header-anchor" href="#触发点" aria-hidden="true">#</a> 触发点</h2><p>方法左侧点击<svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-restfulFastRequest"></use></svg>的时候，如果没有配置域名，则自动创建一个。</p><h2 id="项目名取值" tabindex="-1"><a class="header-anchor" href="#项目名取值" aria-hidden="true">#</a> 项目名取值</h2><p>自动生成的配置项目名取自当前API的模块名。</p><p>为什么呢？因为比方说项目下有2个模块<code>Module-1</code>、<code>Module-2</code>的API，如果<code>Module-1</code>的域名已存储，在<code>Module-2</code>下的API点击方法左侧点击<svg class="icon svg-icon" aria-hidden="true"><use xlink:href="#icon-restfulFastRequest"></use></svg>的时候， <strong>老版本</strong>做不到自动切换项目名。</p><p><mark>建议后期不要手动添加项目名</mark>，因为插件无法找到映射关系，这容易导致API保存的时候本该是用<code>Module-2</code>的域名，结果用了<code>Module-1</code>的域名。</p><p>所以自动域名的另外一个好使是<mark>API域名的自动切换</mark>，如果没有则自动生成，如果有需改改进，开发者只需要修改域名值即可！插件将自动适配!</p><h2 id="配置文件解析逻辑" tabindex="-1"><a class="header-anchor" href="#配置文件解析逻辑" aria-hidden="true">#</a> 配置文件解析逻辑</h2><ol><li>读取<code>application.yml</code>或者<code>bootstrap.yml</code>。如果找到配置<code>server.port</code>或者<code>server.servlet.context-path</code>，则取该配置。</li><li>如果以上配置文件无法找到<code>server.port</code>或者<code>server.servlet.context-path</code>，则读取<code>spring.profiles.active</code>，作为变量<code>env</code>。接着寻找<code>application-env.yml</code>或者<code>bootstrap-env.yml</code>，寻找配置<code>server.port</code>或者<code>server.servlet.context-path</code></li><li>properties文件逻辑类似</li><li>以上配置无法找到则<code>port=8080，context-path=/</code></li><li>项目名称取自模块名</li><li><code>spring.profiles.active</code>不支持Maven变量读取解析，例如<code>spring.profiles.active=@active.env@</code></li><li>针对历史已保存的api，插件不做自动域名处理；针对新的API，如果开关开启，将自动创建域名</li></ol><h2 id="配置开关" tabindex="-1"><a class="header-anchor" href="#配置开关" aria-hidden="true">#</a> 配置开关</h2><p><img src="'+n+'" alt="autoDomain" loading="lazy"></p>',11);function u(v,m){const a=s("Badge");return d(),t("div",null,[p,e("p",null,[o("版本要求: "),r(a,{text:"2023.1.4"})]),h])}const _=c(l,[["render",u],["__file","autoDomain.html.vue"]]);export{_ as default};
