import{_ as t}from"./refreshProjectConfig-07f78e25.js";import{_ as a,a as r}from"./transferData-5dd49379.js";import{_ as o,X as s,Y as i,Z as n,a0 as d,$ as l,a2 as c,B as h}from"./framework-e053119e.js";const u="/fast-request/img/2023.1.3/teamDirectory_en.png",p={},g=c('<h2 id="principle" tabindex="-1"><a class="header-anchor" href="#principle" aria-hidden="true">#</a> Principle</h2><p>Based on version control systems, share <strong>configurations</strong> and <strong>API data</strong>.</p><h2 id="features" tabindex="-1"><a class="header-anchor" href="#features" aria-hidden="true">#</a> Features</h2><p><span class="badge" style="vertical-align:middle;background:#21D789;">No deployment required</span><br><span class="badge" style="vertical-align:middle;background:#087CFA;">Privatisation</span><br><span class="badge" style="vertical-align:middle;background:#FE2857;">Unlimited developers</span><br><span class="badge" style="vertical-align:middle;background:#FC801D;">Unlimited APIs</span><br><span class="badge" style="vertical-align:middle;background:#6B57FF;">Unlimited projects</span><br><span class="badge" style="vertical-align:middle;background:#3DEA62;">Unlimited features</span><br><span class="badge" style="vertical-align:middle;background:#FDB60D;">Offline work</span><br><span class="badge" style="vertical-align:middle;background:#21D789;">Safe</span><br></p><h2 id="how-to-use" tabindex="-1"><a class="header-anchor" href="#how-to-use" aria-hidden="true">#</a> How to use</h2><p>Based on the principle, so when we need to share or pull someone else&#39;s configuration or API, assuming we use Git as our version control system, we can just <strong>push</strong> to share configuration and API data, and <strong>pull</strong> to get someone else&#39;s committed configuration and API data.</p><h3 id="update-configuration" tabindex="-1"><a class="header-anchor" href="#update-configuration" aria-hidden="true">#</a> Update configuration</h3><p>After pull, click the Refresh Project Configuration button to get the configuration submitted by other members.</p><p><img src="'+t+'" alt="refreshProjectConfig" loading="lazy"></p><h2 id="update-api" tabindex="-1"><a class="header-anchor" href="#update-api" aria-hidden="true">#</a> Update API</h2><p>After pull, for example <code>Git pull</code> ,click the API Refresh button to get the APIs submitted by other members.</p><p><img src="'+a+'" alt="refreshProjectConfig" loading="lazy"></p><h2 id="local-file-storage-structure" tabindex="-1"><a class="header-anchor" href="#local-file-storage-structure" aria-hidden="true">#</a> Local file storage structure</h2><p>By default, the plugin will create a <strong>.fastRequest</strong> directory in the root directory of the project. APIs are stored in the <strong>collections</strong> directory, and configurations are stored in the <strong>config</strong> directory. APIs are stored in the structure of <code>module-&gt;class name-&gt;API</code>, and each directory contains a <strong>directory.json</strong> file to identify the directory. Other APIs are stored using the <strong>methodName.rapi</strong>, and conflicts may occur in this file due to multiple modifications in version control systems. Users need to resolve the conflicts and meet the standard JSON and data structures.</p><p>Note that if you want to view the historical data of APIs, you can use the file history records of the version control system to restore them, or you can use the local file history records to restore them.</p><p><img src="'+u+'" alt="teamDirectory" loading="lazy"></p><h2 id="transfer-historical-data" tabindex="-1"><a class="header-anchor" href="#transfer-historical-data" aria-hidden="true">#</a> Transfer historical data.</h2><p>By default, the plugin will perform a historical data migration. During the data migration (for data on versions &lt;= 2023.1.3), you do not need to worry about historical data if your data has not been committed to the version control system. If someone else has already committed the API to the version control system, it will be overwritten. Note that if you want to view API historical data, you can restore it by combining the file history records of the version control system or the local file.</p><p>If you find that the data has not been migrated, you can also manually operate it.</p><p><img src="'+r+'" alt="transferData" loading="lazy"></p>',20);function m(f,y){const e=h("Badge");return s(),i("div",null,[n("p",null,[d("Version Required: "),l(e,{text:"2023.1.3",type:"error"})]),g])}const P=o(p,[["render",m],["__file","teamwork.html.vue"]]);export{P as default};
